sorted dict
for w in sorted(d.keys()):
    print(w, d[w])

flatten_list = list(chain.from_iterable(grid))

# print(f"{i=} {curr[0]=} {total=} {d=}")

Sorting a list and returning the indexes of the sorted values is often useful
sorted_A = sorted(range(len(A)), key=lambda k: A[k])
Sorting a list of lists by one of the indexes:
l.sort(key=lambda x: x[1])
Sorting by two fields:
dominoes.sort(key=lambda x: (x[0], x[1]))
sorted(inputlist, key=lambda e: (len(e[0]), e[0], e[1]))
Now you are sorting each element first by the length, then by comparing the first element directly (which in only used when the first element is of equal length), then by the value of the last integer.
w.sort(key=len)

Initializing a two dimensional list:
x = [[foo for i in range(10)] for j in range(10)]

remove multiple items from a list in one line:
list = [e for e in original_list if e not in [1,2,3]]

Check if counter has only positive values:
if Counter == Counter()

combining a list of numbers to a string:
ans = ''.join(map(str, LIST))

heapq is a min heap setup built in to python
heapq.heapify(heap) will turn a list (heap) into a heap item
https://docs.python.org/2/library/heapq.html
See problem: Minimum cost to connect sticks

collections is a more complex list of datatypes available in python
https://docs.python.org/2/library/collections.html
deque is perfect for popping items from both directions (stack and/or queue)
counter is useful for building hash tables to count items. You can use the most_common function

hash() will return a unique hash number for any item. You can use this to find anagrams by summing the hash of letters and comparing them. abc == cab
hash('a')+hash('b')+hash('c') == hash('c')+hash('a')+hash('b')
https://docs.python.org/3.8/library/functions.html#hash


#uses heapq, which is a min heap setup
#uses negative freq because it wants the highest frequency to be the first 
#available in the queue but then uses negative again to make it a 
#positive number again

Using else after a for loop will tell you if there was a break or if it ran all the way through
myStr = "checkmate"
for i in myStr:
	if i == "m":
		break
	print(i)
else:
	print("no break found")

Output:
c
h
e
c
k


import collections 
import heapq
class Solution:
    def frequencySort(self, s: str) -> str:
        counterMap = collections.Counter(s)
        res = ''
        hq = []
        for char, freq in counterMap.items():
            heapq.heappush(hq, (-freq, char))

        while hq:
            freq, char = heapq.heappop(hq)
            res += -freq*char
            
        return res

import collections 
class Solution:
    def frequencySort(self, s: str) -> str:
        cnt = Counter()
        for letter in s:
            cnt[letter] += 1
        data =  cnt.most_common() #produces tuple with (count, item)
        output = ''
        for i in range(len(data)):
            if data[i][1] == 1:
                output += data[i][0]
            else:
                for j in range(data[i][1]):
                    output += data[i][0]
        return output


import collections
import heapq

class Solution:
    def frequencySort(self, s: str) -> str:
        letterCountDict = {}
        
        for letter in s:
            if letter in letterCountDict:
                letterCountDict[letter]+=1
            else:
                letterCountDict[letter]=1
            
        heap = []
        result = []
        
        for key,value in letterCountDict.items():
            heap.append((-value,key))
        
        heapq.heapify(heap)
            
        
        while(len(heap) != 0):
            value, letter = heapq.heappop(heap)
            value*=-1
            for i in range(value):
                result.append(letter)
        
        return ''.join(result)

https://stackoverflow.com/questions/4383571/importing-files-from-different-folder
import sys
sys.path.append('../')

Array > Medium Width Ramp

collections.Counter is useful for counting occurrences in lists
itertools product is useful when you need permutations with repetition allowed
Morse Code>Cisco_Morse_Code_Challenge
import collections
    cnt = collections.Counter()
    for word in morse_words:
        cnt[word] += 1
    print(cnt.most_common(10))
permutations_list = [p for p in itertools.product(x, repeat=13)]

find out if the sum of three dice rolls is prime:

def P(event, space):
    """The probability of an event, given a sample space of equiprobable outcomes.
    event can be either a set of outcomes, or a predicate (true for outcomes in the event)."""
    if is_predicate(event):
        event = such_that(event, space)
    return Fraction(len(event & space), len(space))

is_predicate = callable

def such_that(predicate, collection):
    "The subset of elements in the collection for which the predicate is true."
    return {e for e in collection if predicate(e)}

D3 = {(d1, d2, d3) for d1 in D for d2 in D for d3 in D}

def prime_sum(outcome): return is_prime(sum(outcome))

def is_prime(n): return n > 1 and not any(n % i == 0 for i in range(2, n))

P(prime_sum, D3)


Make a list of all the cards in a deck
def cross(A, B):
    "The set of ways of concatenating one item from collection A with one from B."
    return {a + b
            for a in A for b in B}

suits = 'SHDC'
ranks = 'A23456789TJQK'
deck  = cross(ranks, suits)

l1 = [1,"hi",None]
#creating a shallow copy of a list
l2 = l1 #This changes the memory location of l2
#creating a deep copy of a list
l2 = l1[:] #This does not change the memory location of l2

zip two lists into one:
ans = []
for j, k in zip(list1, list2):
    ans.append(j)
    ans.append(k)

find all indexes of a char in a string:
def find1(str, ch):
  # 0.100 seconds for 1MB str
  npbuf = np.frombuffer(str, dtype=np.uint8) # Reinterpret str as a char buffer
  return np.where(npbuf == ord(ch))          # Find indices with numpy

def find2(str, ch):
  # 0.920 seconds for 1MB str
  return [i for i, c in enumerate(str) if c == ch] # Find indices with python

get kth column of a matrix:
res = [sub[K] for sub in test_list]

finding columns of a list of lists:
return sum([list(col) != sorted(col) for col in zip(*A)])
The * indicates that A is an iterable
cols = list(zip(*mat)) #mat is a 2D matrix

#Unzips the list and compares each letter to all other letters in all other words until one doesn't match and then breaks
#group will look like ['f','f','f'] for the first example
#res will look like ['f','l'] for the first example
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        res = []
        for group in zip(*strs):
            if len(set(group)) > 1: break
            res.append(group[0])
        return "".join(res)

find index of max in list
maxxi = max((v, i) for i, v in enumerate(a))[1]

https://leetcode.com/discuss/interview-question/344650/Amazon-Online-Assessment-Questions

Piperclip has copy and paste functions in python to use the computer’s clipboard

Using the command line for python3:
The shebang line tells your computer that you want to run the script using python 3
On windows, you can bring up the Run dialog by pressing Win+R
A batch file can save you a lot of typing by running multiple commands
The batch files you’ll make will look like this:

@py C:\Users\Al\MyPythonScripts\hello.py %*
@pause

You’ll need to add the MyPythonScripts folder to the PATH environment variable first
Command-line arguments can be read in the sys.argv list

Regular expressions objects:
Import re
Because regular expressions have a lot of backslashes in them, use raw strings formatted like r''
Find all phone numbers in a message:
import re
phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
#Create a match object
#Search finds the first phone number in the message
mo = phoneNumRegex.search('Call me at 555-555-5555 tomorrow')
print(mo.group())
#Findall finds all of the numbers
mo = phoneNumRegex.findall('Call me at 555-555-5555 tomorrow')
print(mo.group())
Regular expressions are mini-language for speyfying text patterns. Writing code to do pattern matching without regular expressions is a huge pain.
Regex strings often use \ backslashes like \d so they are often raw strings
Import re module first
Call the re.compile() function to create a regex object
Call the regex object search() method to create a match object
Call the match object's group() method to get the matched string
\d is the regex for a numeric digit character
Groups are created in regex strings with parentheses
The first set of parentheses is group1, the second is 2 and so on.
Calling group() or group(0) returns the full matching string, group(1) returns group 1's matching string, and so on
Use \( and \) to match literal parentheses in the regex string
The pipe | character can match one of many possible groups
The ? says the group matches 0 or 1 times
the * says the group matches 0+ times
the + says the group matches 1+ times
The curly braces can match a specific number of times
The curly braces with two numbers matches a minimum and a maximum number of times
Leaving out the first or second number in the curly braces says there is no minimum or maximum respectively
Greedy matching - match the longest string possible, nongreedy matching - match the shortest string posssible
Putting a question mark after the curly braces makes it do a nongreedy match
#! python3
# phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard.
import pyperclip, re
#Create a Regex for Phone Numbers
phoneRegex = re.compile(r'''(
    (\d{3}|\(\d{3}\))?                # area code
    (\s|-|\.)?                        # separator
    (\d{3})                           # first 3 digits
    (\s|-|\.)                         # separator
    (\d{4})                           # last 4 digits
    (\s*(ext|x|ext.)\s*(\d{2,5}))?    # extension
    )''', re.VERBOSE)
#Create a Regex for Email Addresses
emailRegex = re.compile(r'''(
    [a-zA-Z0-9._%+-]+      # username
    @                      # @ symbol
    [a-zA-Z0-9.-]+         # domain name
    (\.[a-zA-Z]{2,4})      # dot-something
    )''', re.VERBOSE)
# Find matches in clipboard text.
text = str(pyperclip.paste())
matches = []
for groups in phoneRegex.findall(text):
    phoneNum = '-'.join([groups[1], groups[3], groups[5]])
    if groups[8] != '':
        phoneNum += ' x' + groups[8]
    matches.append(phoneNum)
for groups in emailRegex.findall(text):
    matches.append(groups[0])
#Copy results to the clipboard.
if len(matches) > 0:
    pyperclip.copy('\n'.join(matches))
    print('Copied to clipboard:')
    print('\n'.join(matches))
else:
    print('No phone numbers or email addresses found.')

Use logging instead of print statements to debug
os.walk() searches through directory
Raise and assert for errors
use zipfile for zip files
Safe deletes with send2trash
moving and renaming files: shutil.move('C:\\bacon.txt', 'C:\\eggs\\new_bacon.txt')
webbrowser - opens a browser to a specific page
requests downloads files and web pages from the internet http://requests.readthedocs.org/
Beautiful Soup - Parses HTML, the format that web pages are written in
Selenium - Launches and controls a web browser/ Selenium is able to fill in forms and simulate mouse clicks in this browser
Pragmatic unicode - bit.ly/unipain

html tutorials: http://htmldog.com/guides/html/beginner/ http://www.codecademy.com/tracks/web/ https://developer.mozilla.org/en-US/learn/html/

import requests, bs4
def getAmazonPrice(productUrl):
    res = requests.get(productUrl)
    res.raise_for_status()

    soup = bs4.BeautifulSoup(res.text, 'html.parser')
    #Go to web page, right click on price, inspect element, copy path name
    elems = soup.select('html.a-ws.a-js.a-audio.a-video.a-canvas.a-svg.a-drag-drop.a-geolocation.a-history.a-webworker.a-autofocus.a-input-placeholder.a-textarea-placeholder.a-local-storage.a-gradients.a-transform3d.-scrolling.a-text-shadow.a-text-stroke.a-box-shadow.a-border-radius.a-border-image.a-opacity.a-transform.a-transition.a-ember body.a-m-us.a-aui_72554-c.a-aui_control_group_273125-t1.a-aui_dropdown_274033-t1.a-aui_link_rel_noreferrer_noopener_274172-c.a-aui_mm_desktop_exp_291916-c.a-aui_mm_desktop_launch_291918-c.a-aui_mm_desktop_targeted_exp_291928-t1.a-aui_mm_desktop_targeted_launch_291922-t1.a-aui_pci_risk_banner_210084-c.a-aui_perf_130093-c.a-aui_preload_261698-c.a-aui_tnr_v2_180836-c div#a-page div#dp.musical_instruments.en_US div#dp-container.a-container div#ppd div#rightCol.rightCol.rightCol-bbcxoverride div#desktop_buybox.celwidget div#buybox div#qualifiedBuybox.celwidget div.a-section form#addToCart.a-content div.a-box-group div.a-box.a-last div.a-box-inner div.a-section.a-spacing-none.a-padding-none div#priceInsideBuyBox_feature_div.celwidget div.a-section span#price_inside_buybox.a-size-medium.a-color-price')
    return elems[0].text.strip()

ideas for web scraping:
get weather data from www.weather.gov
go to xkcd.com and download all the funny images

For excel:
Use openpyxl module
Although Excel is proprietary software from Microsoft, there are free alternatives that run on Windows, OS X, and Linux. Both LibreOffice Calc and OpenOffice Calc work with Excel’s .xlsx file format for spreadsheets, which means the openpyxl module can work on spreadsheets from these applications as well.
import openpyxl
import os
os.chdir('c:folder path with file in it')
workbook = openpyxl.load_workbook('example.xlsx')
workbook.get_sheet_names()
workbook.get_active_sheet()
sheet = workbook.get_sheet_by_name('Sheet1')
cell = sheet['A1']
cell.value
str(sheet['A1'].value)
sheet.cell(row=1,column=2) #row and column start at 1, not 0
for i in range(1,8):
    print(i,sheet.cell(row=i,column=2.value)
get_column_letter(1) = 'A'

#Create a new excel workbook
import openpyxl
wb = openpyxl.Workbook() #Excel always creates a new workbook with three sheets named sheet1, sheet2, sheet3
wb.get_sheet_names()
sheet = wb.get_sheet_by_name("Sheet")
sheet['A1'].value == None #True
sheet['A1'] = 42
sheet['A2'] = 'hello'
import os
os.chdir('c:folder path')
wb.save('example.xlsx')
sheet2 = wb.create_sheet()
sheet2.title = "my new sheet name"
wb.save('example.xlsx')
wb.create_sheet(index = 0, title = 'new sheet')
wb.save('example.xlsx')

Reading and editing PDFs
import PyPDF2
pdfFile = open('example.pdf','rb') #read binary
reader = PyPDF2.PdfFileReader(pdfFile)
reader.numPages # Returns number of pages
page = reader.getPage(0)
page.extractText() #Returns string
for i in range(reader.numPages):
    print(reader.getPage(pageNum).extractText())
You can add pages or remove pages of the PDF

Combine PDFs:
>>> import PyPDF2
>>> pdf1File = open('meetingminutes.pdf', 'rb')
>>> pdf2File = open('meetingminutes2.pdf', 'rb')
>>> pdf1Reader = PyPDF2.PdfFileReader(pdf1File)
>>> pdf2Reader = PyPDF2.PdfFileReader(pdf2File)
>>> pdfWriter = PyPDF2.PdfFileWriter()
>>> for pageNum in range(pdf1Reader.numPages):
    pageObj = pdf1Reader.getPage(pageNum)
    pdfWriter.addPage(pageObj)
>>> for pageNum in range(pdf2Reader.numPages):
    pageObj = pdf2Reader.getPage(pageNum)
    pdfWriter.addPage(pageObj)
>>> pdfOutputFile = open('combinedminutes.pdf', 'wb')
>>> pdfWriter.write(pdfOutputFile)
>>> pdfOutputFile.close()
>>> pdf1File.close()
>>> pdf2File.close()

Rotating Pages:
>>> import PyPDF2
>>> minutesFile = open('meetingminutes.pdf', 'rb') >>> pdfReader = PyPDF2.PdfFileReader(minutesFile)
➊ >>> page = pdfReader.getPage(0) ➋
>>> page.rotateClockwise(90)
>>> pdfWriter = PyPDF2.PdfFileWriter()
>>> pdfWriter.addPage(page)
➌ >>> resultPdfFile = open('rotatedPage.pdf', 'wb')
>>> pdfWriter.write(resultPdfFile)
>>> resultPdfFile.close()
>>> minutesFile.close()

PDFtables - convert PDF to excel

PyPDF2
Overlaying pages (Adding a watermark)
Encrypting PDFs #Using password that you provide
Combine specific pages of PDFs
Remove certain pages from PDF
Reorder pages in a PDF
Create a PDF from only the pages that have some specific text, identified by extractText()

word documents:
import .docx

Have programs run in the background or wait for a specific time/date to run
import time
import datetime
Thread the code - have more than one processor run the code at once to run multiple lines of code simultaneously
import threading

Launching other programs from Python
import subprocess
On Windows, right-click the application’s Start menu item and select Properties to view the application’s filename. On OS X, CTRL-click the application and select Show Package Contents to find the path to the executable file.
>>> subprocess.Popen(['open', '/Applications/Calculator.app/'])
>>> subprocess.Popen(['C:\\python34\\python.exe', 'hello.py'])

Making an executable app with Python on Mac
The method we’re gonna use for us Mac users follows the same concept as the way described above for Windows. The goal is to create an executable file that we then will be able to double click on.
https://martechwithme.com/convert-python-script-app-windows-mac/

To do so, let’s open our favorite text editor and input these lines :
#!/bin/sh
Python /Users/yanissilloul/Documents/instabot-master/examples/like_hashtags_copy.py neonphotography

As you can see, the only thing required is the full path of the script followed by the arguments if required. Don’t forget to precede this filepath with the mention “Python”. Also, the first line has to be exactly like it is shown in the code snippet above this paragraph.
When saving your file, make sure no file extension is specified.
Then, copy the filepath of this newly created file into your clipboard and launch your Terminal.
The next thing we want to do is write “chmod 755”, paste the path name previously copied in our clipboard and execute this command.
This will convert our extensionless file into a Unix executable that you will be able to double click on to launch your script. You could already stop at that step but for organization purposes and in order to schedule the scripts in the next article, there is still a couple of steps left to do. If you were just looking for an easy way to run your script by double-clicking on a file, you don’t need to go further 🙂
Finally, if you want a real application file instead of a simple Unix executable that you will be able to schedule, we can do so by launching Automator.
After launching the program, choose to create an “Application”.
In the list of actions on the left side, get the parameter “Get Specified Finder Items”. Once you added it to your right panel in Automator, you should be able to “Add” an item to this action. At this point, you want to browse through your files and select your Unix Executable.
After that, we need to add a new action, namely “Open Finder Items”. This will trigger to open the file selected previously in its default application.
All that’s left is to save. Choose a name that you will recognize and you will now have your own .app file ready to be launched!
And this wraps up our tutorial for the Mac users. I hope this is gonna allow you to spend less time on launching your scripts and more time on creating new ones.
Considering that I know how easy it is to forget to launch a script, especially if you have to do it every day, the next article is covering how to schedule these newly created executable files so that our operating systems will take care of launching those following a set schedule.

Email:
import smtplib
For the password you will input into Python, you will need an app specific password, not your main google password
To get the app specific password, you can google: "gmail app specific password"
Then, you can find details for generating an app specific password

Gmail prevents spam by limiting you to 100 or 150 emails per day. Other email providers may have different rules.

For the password steps, always use input() to prompt the user to enter the password this way instead of writing it in plain text

The SMTP is the protocol for sending email while the IMAP specifies how to communcate with an email provider's server to retrieve emails sent to your email address.
You can use import imaplib but import imapclient is easier to use
The imapclient module downloads emails from an IMAP server in a rather complicated format. Most likely, you’ll want to convert them from this format into simple string values. The pyzmail module does the hard job of parsing these email messages for you. You can find the complete documentation for PyzMail at

Size Limits
If your search matches a large number of email messages, Python might raise an exception thatsaysimaplib.error: got more than 10000 bytes.Whenthishappens,youwill have to disconnect and reconnect to the IMAP server and try again.
This limit is in place to prevent your Python programs from eating up too much memory. Unfortunately, the default size limit is often too small. You can change this limit from 10,000 bytes to 10,000,000 bytes by running this code:
>>> import imaplib
>>> imaplib._MAXLINE = 10000000
Perform searches using google's advanced searching algorithm
UIDs = imapObj.gmail_search('meaning of life')

Search for and delete emails

Sending text messages with Twilio
Twilio is an SMS gateway service, which means it’s a service that allows you to send text messages from your programs. Although you will be limited in how many texts you can send per month and the texts will be prefixed with the words Sent from a Twilio trial account, this trial service is probably adequate for your personal programs. The free trial is indefinite; you won’t have to upgrade to a paid plan later.
Twilio isn’t the only SMS gateway service. If you prefer not to use Twilio, you can find alternative services by searching online for free sms gateway, python sms api, or even twilio alternatives.

You will need two more pieces of information: your account SID and the auth (authentication) token

>>> from twilio.rest import TwilioRestClient
>>> accountSID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' >>> authToken = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
➋ >>> twilioCli = TwilioRestClient(accountSID, authToken) >>> myTwilioNumber = '+14955551234'
>>> myCellPhone = '+14955558888'
➌ >>> message = twilioCli.messages.create(body='Mr. Watson - Come here - I want to see you.', from_=myTwilioNumber, to=myCellPhone)

As a simple example, here’s a small Python program with a textmyself() function that sends a message passed to it as a string argument. Open a new file editor window and enter the following code, replacing the account SID, auth token, and phone numbers with your own information. Save it as textMyself.py.
#! python3
# textMyself.py - Defines the textmyself() function that texts a message # passed to it as a string.
# Preset values:
accountSID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' authToken = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' myNumber = '+15559998888'
twilioNumber = '+15552225678'
from twilio.rest import TwilioRestClient
➊ def textmyself(message):
➋ twilioCli = TwilioRestClient(accountSID, authToken)
➌ twilioCli.messages.create(body=message, from_=twilioNumber, to=myNumber)
This program stores an account SID, auth token, sending number, and receiving number. It then defined textmyself() to take on argument ➊, make a TwilioRestClient object ➋, and call create() with the message you passed ➌.
If you want to make the textmyself() function available to your other programs, simply place the textMyself.py file in the same folder as the Python executable (C:\Python34 on Windows, /usr/local/lib/python3.4 on OS X, and /usr/bin/python3 on Linux). Now you can use the function in your other programs. Whenever you want one of your programs to text you, just add the following:
import textmyself
textmyself.textmyself('The boring task is finished.')
You need to sign up for Twilio and write the texting code only once. After that, it’s just two lines of code to send a text from any of your other programs.

Umbrella Reminder
Chapter 11 showed you how to use the requests module to scrape data from http://weather.gov/. Write a program that runs just before you wake up in the morning and checks whether it’s raining that day. If so, have the program text you a reminder to pack an umbrella before leaving the house.
Auto Unsubscriber

Manipulating images - rotations, flipping, resizing, cropping, drawing
import Pillow
from PIL import ImageColor
ImageColor.getcolor('red', 'RGBA')
Standard color names:
https://html-color-codes.info/color-names/

Chapter 18. Controlling the Keyboard and Mouse with GUI Automation
pyautogui module
sudo pip3 install pyobjc-framework-Quartz,sudo pip3 install pyobjc-core,andthensudo pip3 install pyobjc
pip3 install pyautogui

Before you jump in to a GUI automation, you should know how to escape problems that may arise. Python can move your mouse and type keystrokes at an incredible speed. In fact, it might be too fast for other programs to keep up with. Also, if something goes wrong but your program keeps moving the mouse around, it will be hard to tell what exactly the program is doing or how to recover from the problem. Like the enchanted brooms from Disney’s The Sorcerer’s Apprentice, which kept filling — and then overfilling — Mickey’s tub with water, your program could get out of control even though it’s following your instructions perfectly. Stopping the program can be difficult if the mouse is moving around on its own, preventing you from clicking the IDLE window to close it. Fortunately, there are several ways to prevent or recover from GUI automation problems.
PyAutoGUI also has a fail-safe feature. Moving the mouse cursor to the upper-left corner of the screen will cause PyAutoGUI to raise the pyautogui.FailSafeException exception.

Redefine lt in largest number in int manipulation
Also in K-th Smallest in Lexicographical Order
def __lt__(x, y):

Tree traversals
(a) Inorder (Left, Root, Right) : 4 2 5 1 3
(b) Preorder (Root, Left, Right) : 1 2 4 5 3
(c) Postorder (Left, Right, Root) : 4 5 2 3 1